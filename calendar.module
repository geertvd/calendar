<?php

/**
 * @file
 * This is the Calendar module for calendar filtering and display in views.
 */

use Drupal\Core\Url;
use Drupal\field\FieldStorageConfigInterface;
use Drupal\views\ViewExecutable;

define('CALENDAR_SHOW_ALL', 0);
define('CALENDAR_HIDE_ALL', -1);
define('CALENDAR_EMPTY_STRIPE', '#ffffff');

/**
 * Implements hook_page_attachments().
 */
function calendar_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'calendar/calendar.theme';
}

/**
 * Implements hook_preprocess_date_views_pager().
 *
 * Creates a calendar_links array which is stored in the session and used
 * in calendar_menu_local_tasks_alter() to display the links as action items.
 * The links can be altered or deleted using hook_calendar_links_alter().
 */
function calendar_preprocess_date_views_pager(&$vars) {
  $view = $vars['plugin']->view;

  // If no one has added date information, nothing to do here.
  if (empty($view->date_info) || empty($view->argument)) {
    return;
  }

  // If we're not on a view with a path (a page), no links are needed.
  $current_path = !empty($view->display_handler->options['path']) ? $view->display_handler->options['path'] : '';
  if (empty($current_path)) {
    return;
  }

  // If this display has been set up as a default tab, the current path
  // is actually the base path, i.e. if the path is 'calendar/month'
  // and this is a default tab, the path for this display will actually
  // be 'calendar'.
  if ($view->display_handler->options['menu']['type'] == 'default tab') {
    $parts = explode('/', $current_path);
    array_pop($parts);
    $current_path = implode('/', $parts);
  }

  // If an 'Add new ... link is provided, add it here.
  if (!empty($view->date_info->calendar_date_link) && !empty($view->date_info->url)
  && (\Drupal::currentUser()->hasPermission("administer nodes") || \Drupal::currentUser()->hasPermission('create ' . $view->date_info->calendar_date_link . ' content'))) {
    $name = node_type_get_name($view->date_info->calendar_date_link);
    $href = 'node/add/' . str_replace('_', '-', $view->date_info->calendar_date_link);
    $calendar_links[$current_path]['actions'][] = array('title' => t('Add @name', array('@name' => $name)), 'path' => $href);
  }

  // Pass this through drupal_alter() so it can be adjusted in custom code or in the theme.
  \Drupal::moduleHandler()->alter('calendar_links', $calendar_links);

  // Add the value to the session so it can be used to create the action links.
  if (!empty($calendar_links[$current_path])) {
    $_SESSION['calendar_links'][$current_path] = $calendar_links[$current_path];
  }
}

/**
 * Implements hook_date_default_argument_alter().
 *
 * Adjust the default date for a view based on the stored session value. This is
 * used for current date tracking.
 */
function calendar_date_default_argument_alter(&$argument, &$value) {
  $user = \Drupal::currentUser();
  $style_options = $argument->view->display_handler->get_option('style_options');
  $tracking = \Drupal::config('calendar.settings')->get('calendar_track_date');
  if (!empty($tracking) && ($tracking == 2 || !empty($user->uid))) {

    // If this is a default date, i.e. we are visiting a new calendar display,
    // set the default date for the display. See if we already have a session
    // date to use. If so, use it. Otherwise the default is the current date.
    if (!empty($_SESSION[$argument->view->name]['default_date'])) {
      $default_date = $_SESSION[$argument->view->name]['default_date'];
    }
    else {
      $default_date = date_now();
      $_SESSION[$argument->view->name]['default_date'] = $default_date;
    }
    // Get the current date from the session.
    $value = $default_date->format($argument->arg_format);
  }
}

/**
 * Implements hook_views_pre_render().
 *
 * Track the current date as the user moves from calendar display to calendar
 * display.
 */
function calendar_views_pre_render(ViewExecutable $view) {
  $user = \Drupal::currentUser();

  $tracking = \Drupal::config('calendar.settings')->get('calendar_track_date');
  if (!empty($tracking) && ($tracking == 2 || !empty($user->uid))) {
    foreach ($view->argument as $id => &$argument) {

      // If this is not a default date, i.e. we have browsed to a new calendar
      // period on a display we were already on, store the midpoint of the current
      // view as the current date in a session.
      if ($argument instanceof \Drupal\calendar\Plugin\views\argument\CalendarDate && empty($argument->is_default)) {
        $date_range = $argument->date_handler->arg_range($argument->argument);
        $session_date = $date_range[0];
        $days = intval(($date_range[1]->format('U') - $date_range[0]->format('U')) / 3600 / 24 / 2);
        date_modify($session_date, "+$days days");
        $_SESSION[$view->name]['default_date'] = $session_date;
      }
    }
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 *
 * Takes the calendar links created in calendar_preprocess_date_views_pager()
 * and reconfigures them as action items. The links can be altered
 * before they are displayed using hook_calendar_links_alter().
 */
function calendar_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (!empty($_SESSION['calendar_links']) && array_key_exists($root_path, $_SESSION['calendar_links'])) {
    $calendar_data = $_SESSION['calendar_links'][$root_path];
    if (!empty($calendar_data['actions'])) {
      foreach ($calendar_data['actions'] as $action) {
        // @FIXME
// menu_get_item() has been removed. To retrieve route information, use the
// RouteMatch object, which you can retrieve by calling \Drupal::routeMatch().
// 
// 
// @see https://www.drupal.org/node/2203305
// $item = menu_get_item($action['path']);

        $item['title'] = $action['title'];
        // The add new content page would redirect to the new event
        // if we did not override that here. This way they will
        // redirect back to the calendar.
	if (!isset($item['localized_options'])) {
          $item['localized_options'] = array();
        }
        $item['localized_options'] += array('query' => array());
        $item['localized_options']['query'] += drupal_get_destination();
        if (array_key_exists('access', $item) && $item['access']) {
          $data['actions']['output'][] = array(
            '#theme' => 'menu_local_action',
            '#link' => $item,
          );
        }
      }
    }
  }
  return;
}

/**
 * Calendar display types.
 */
function calendar_display_types() {
  return array('year' => t('Year'), 'month' => t('Month'), 'day' => t('Day'), 'week' => t('Week'));
}

/**
 * Implementation of hook_help().
 */
function calendar_help($section, $arg) {
  switch ($section) {
    case 'admin/help#calendar':
      return t("<p>View complete documentation at :link.</p>", [
        ':link' => \Drupal::l(t('Date and Calendar Documentation'), \Drupal\Core\Url::fromUri('http://drupal.org/node/262062'))
      ]);
  }
}

/**
 * Implements hook_theme().
 */
function calendar_theme() {
  return [
    'calendar_mini' => [
      'variables' => ['view' => NULL, 'options' => [], 'rows' => []],
    ],
    'calendar_month_multiple_entity' => [
      'variables' => ['curday' => NULL, 'count' => NULL, 'view' => NULL, 'ids' => NULL],
    ],
    'calendar_datebox' => [
      'variables' => ['date' => NULL, 'view' => NULL, 'items' => NULL, 'selected' => NULL],
      'file' => 'calendar.theme.inc',
    ],
    'calendar_empty_day' => [
      'variables' => ['curday' => NULL, 'view' => NULL],
    ],
    'calendar_month_col' => [
      'variables' => ['item' => NULL],
    ],
    'calendar_month_row' => [
      'variables' => ['inner' => NULL, 'class' => NULL, 'iehint' => NULL],
    ],
    'calendar_day' => [
      'variables' => ['view' => NULL, 'columns' => [], 'rows' => [], 'min_date_formatted' => NULL, 'max_date_formatted' => NULL],
    ],
    'calendar_month' => [
      'variables' => ['view' => NULL, 'options' => [], 'rows' => []],
      'file' => 'calendar.theme.inc',
    ],
    'calendar_stripe_legend' => [
      'variables' => ['view_and_display_id' => NULL, 'title' => NULL],
    ],
    'calendar_item' => [
      'variables' => ['view' => NULL, 'rendered_fields' => NULL, 'item' => NULL],
      'file' => 'calendar.theme.inc',
    ],
    'calendar_stripe_stripe' => [
      'variables' => ['node' => NULL],
    ],
    'calendar_week' => [
      'variables' => ['view' => NULL, 'day_names' => [], 'rows' => [],],
      'file' => 'calendar.theme.inc',
    ],
    'calendar_week_overlap' => [
      'variables' => ['view' => NULL, 'day_names' => [], 'rows' => [],],
      'file' => 'calendar.theme.inc',
    ],
    'calendar_year' => [
      'variables' => ['view' => NULL, 'rows' => [], 'months' => [], 'mini' => FALSE,],
      'file' => 'calendar.theme.inc',
    ],
    'calendar_time_row_heading' => [
      'variables' => [
        'start_time' => NULL,
        'next_start_time' => NULL,
        'curday_date' => NULL
      ],
    ],
  ];
}

/**
 * Implements hook_node_view().
 */
function calendar_node_view($node, $view_mode, $langcode) {
  // @todo finding the bundle like this is probably not the right way
  $path = \Drupal::state()->get('calendar_date_link_' . $node['title']['#bundle']);

  if (!empty($path)) {
    $links['calendar_link'] = [
      'title' => t('Calendar'),
      'href' => $path,
      'attributes' => ['title' => t('View the calendar.')],
    ];
    // @todo this rendering does not work
    $node['links']['calendar'] = [
      '#theme' => 'links__node__calendar',
      '#links' => $links,
      '#attributes' => ['class' => ['links', 'inline']],
    ];
  }
}

/**
 * Helper function to add a link to the state storage.
 *
 * @param string $entity_type
 *   The type of entity.
 * @param string $bundle
 *   The entity bundle name.
 * @param string $path
 *   The calendar path to use for this bundle.
 */
function calendar_set_link($entity_type, $bundle, $path) {
  // @todo this should probably be stored in config instead of state storage
  switch ($entity_type) {
    case 'node':
      \Drupal::state()->set('calendar_date_link_' . $bundle, $path);
      break;

    default:
      \Drupal::state()->set('calendar_date_link_' . $entity_type . '_' . $bundle, $path);
      break;

  }
}

/**
 * Helper function to clear previously-set links to calendars.
 *
 * @param string $bundle
 *   The bundle to clear the links for. If NULL, all links are cleared.
 */
function calendar_clear_link_bundle($bundle = NULL) {
  // @todo figure out where to store the variables before fixing this
  if (empty($bundle)) {
// $result = db_select('variable', 'v')
//       ->fields('v', 'name')
//       ->condition('name', 'calendar_date_link_%', 'LIKE')
//       ->execute()->fetchAll(PDO::FETCH_ASSOC);

  }
  else {
// $result = db_select('variable', 'v')
//       ->fields('v', 'name')
//       ->condition('name', 'calendar_date_link_' . $bundle)
//       ->execute()->fetchAll(PDO::FETCH_ASSOC);

  }
  // Iterate over all the values and delete them.
  $result = [];
  foreach ($result as $row) {
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// variable_del($row['name']);

  }
}

/**
 * Helper function to clear previously-set links to calendars.
 *
 * @param $path
 *   The path to which all links should be cleared. If NULL, all links are
 *   cleared.
 */
function calendar_clear_link_path($path = NULL) {
  // @todo figure out where to store the variables before fixing this
// $result = db_select('variable', 'v')
//     ->fields('v', array('name', 'value'))
//     ->condition('name', 'calendar_date_link_%', 'LIKE')
//     ->execute()->fetchAll(PDO::FETCH_ASSOC);

  // Iterate over all the values and delete them.
  $result = [];
  foreach ($result as $row) {
    if (empty($path) || unserialize($row['value']) == $path) {
// // The correct configuration object could not be determined. You'll need to
// // rewrite this call manually.
// variable_del($row['name']);

    }
  }
  if (isset($_SESSION['calendar_links'][$path]['actions'])) {
    unset($_SESSION['calendar_links'][$path]['actions']);
    if (empty($_SESSION['calendar_links'][$path])) {
      unset($_SESSION['calendar_links'][$path]);
    }
  }
}

/**
 * Default settings array for calendar time grouping.
 */
function calendar_groupby_times($type = '') {
  $times = array();
  switch ($type) {
    case 'hour':
      for ($i = 0; $i <= 23; $i++) {
        $times[] = \Drupal\Component\Datetime\DateTimePlus::datePad($i) . ':00:00';
      }
      break;
    case 'half':
      for ($i = 0; $i <= 23; $i++) {
        $times[] = \Drupal\Component\Datetime\DateTimePlus::datePad($i) . ':00:00';
        $times[] = \Drupal\Component\Datetime\DateTimePlus::datePad($i) . ':30:00';
      }
      break;
    default:
      break;
  }
  return $times;
}

/**
 * Find the path for the calendar display that has a specific granularity.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   The current view.
 * @param string $granularity
 *   The granularity to find.
 *
 * @return string
 *   The path for the specific granularity, or an empty string if none was
 *   found.
 */
function calendar_granularity_path(ViewExecutable &$view, $granularity) {
  // @todo Find out what should happen here.
  $paths = &drupal_static(__FUNCTION__, array());
  $view_name = $view->id();
  if (!array_key_exists($view_name, $paths) || (isset($paths[$view->id()]) && !(array_key_exists($granularity, $paths[$view->id()])))) {
    $paths[$view_name][$granularity] = '';

    foreach ($view->displayHandlers->getConfiguration() as $id => $display) {
      // Check for !empty() in case the view is not fully formed or has displays that are marked to be deleted
      // @todo handle deleted displays
//      if (!empty($display->deleted) || empty($display->display_options['style_plugin']) || (isset($display->display_options['enabled']) && $display->display_options['enabled'] == FALSE)) {
//        continue;
//      }

      if ($display['display_plugin'] != 'feed' && !empty($display['display_options']['path']) && !empty($display['display_options']['arguments'])) {

        // Set to the default value, reset below if another value is found.
        $type = 'month';
        foreach ($display['display_options']['arguments'] as $name => $argument) {
          if (!empty($argument['calendar']['granularity'])) {
            $type = $argument['calendar']['granularity'];
          }
        }

        if ($type == $granularity) {
          $part_path =  $display['display_options']['path'];
          $parts = explode('/', $part_path);
          if (in_array('%', $parts)) {
            $url = Url::fromRoute('<current>');
            $current_path = $url->toString();
            $current_parts = explode('/', $current_path);
            foreach ($parts as $key => $part) {
              if ($part == '%' && !empty($current_parts[$key])) {
                $parts[$key] = $current_parts[$key];
              }
            }
            $part_path = implode('/', $parts);
          }
          $paths[$view->id()][$granularity] = $part_path;
        }
      }
    }
  }
  return $paths[$view->id()][$granularity];
}

/**
 *  Check to make sure the user has entered a valid 6 digit hex color.
 */
function calendar_validate_hex_color($element, &$form_state) {
  if (!$element['#required'] && empty($element['#value'])) {
    return;
  }
  if (!preg_match('/^#(?:(?:[a-f\d]{3}){1,2})$/i', $element['#value'])) {
    form_error($element, t("'@color' is not a valid hex color", array('@color' => $element['#value'])));
  }
  else {
    $form_state->setValueForElement($element, $element['#value']);
  }
}

/**
 * @deprecated Find the right d8 alternative.
 *
 * The calendar week number for a date.
 *
 * PHP week functions return the ISO week, not the calendar week.
 *
 * @param string $date
 *   A date string in the format Y-m-d.
 *
 * @return int
 *   The calendar week number.
 */
function date_week($date) {
  $date = substr($date, 0, 10);
  $parts = explode('-', $date);

  $timezone = new DateTimeZone('UTC');
  $date = new DateTime($date . ' 12:00:00', $timezone);

  $year_date = new DateTime($parts[0] . '-01-01 12:00:00', $timezone);
  $week = intval($date->format('W'));
  $year_week = intval(date_format($year_date, 'W'));
  $date_year = intval($date->format('o'));

  // Remove the leap week if it's present.
  if ($date_year > intval($parts[0])) {
    $last_date = clone($date);
    date_modify($last_date, '-7 days');
    $week = date_format($last_date, 'W') + 1;
  }
  elseif ($date_year < intval($parts[0])) {
    $week = 0;
  }

  if ($year_week != 1) {
    $week++;
  }

  // Convert to ISO-8601 day number, to match weeks calculated above.
  $iso_first_day = 0;

  // If it's before the starting day, it's the previous week.
  if (intval($date->format('N')) < $iso_first_day) {
    $week--;
  }

  // If the year starts before, it's an extra week at the beginning.
  if (intval(date_format($year_date, 'N')) < $iso_first_day) {
    $week++;
  }

  return $week;
}
